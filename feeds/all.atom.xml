<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kieran's website</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2020-04-20T00:00:00+01:00</updated><entry><title>Image Analysis</title><link href="/articles/2020/04/20/image-analysis/" rel="alternate"></link><published>2020-04-20T00:00:00+01:00</published><updated>2020-04-20T00:00:00+01:00</updated><author><name>Kieran McAuley</name></author><id>tag:None,2020-04-20:/articles/2020/04/20/image-analysis/</id><summary type="html">&lt;h1&gt;&lt;code&gt;Image Analysis using scipy and scikit-image&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;In this post, I examine the use of scipy and scikit-image for use in image analysis with a focus on its application to scientific data. &lt;/p&gt;
&lt;h2&gt;Images as numpy arrays&lt;/h2&gt;
&lt;p&gt;Images are represented in &lt;code&gt;scikit-image&lt;/code&gt; using standard &lt;code&gt;numpy&lt;/code&gt; arrays. This allows maximum inter-operability with other â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;&lt;code&gt;Image Analysis using scipy and scikit-image&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;In this post, I examine the use of scipy and scikit-image for use in image analysis with a focus on its application to scientific data. &lt;/p&gt;
&lt;h2&gt;Images as numpy arrays&lt;/h2&gt;
&lt;p&gt;Images are represented in &lt;code&gt;scikit-image&lt;/code&gt; using standard &lt;code&gt;numpy&lt;/code&gt; arrays. This allows maximum inter-operability with other python libraries such as, &lt;code&gt;matplotlib&lt;/code&gt; and &lt;code&gt;scipy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A standard color image is just a 3D array, where the last dimension has a size of 3 and contains information on the images red, green and blue channels (RGB). The following example uses a sample image from the sckit-image module to demonstrate the attributes of an image array.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;
 &lt;span class="c1"&gt;# loading standard libraries&lt;/span&gt;
 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
 &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
 &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

 &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chelsea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="c1"&gt;# obtain the image dimensions &lt;/span&gt;
 &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Shape:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;#obtaining the maximum array values&lt;/span&gt;
 &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Values min/max:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kp"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

 &lt;span class="c1"&gt;# in python we can manipulate the values of the image arrays&lt;/span&gt;
 &lt;span class="c1"&gt;# here a square portion is defined using the row and column co-ordinates of the image&lt;/span&gt;
 &lt;span class="c1"&gt;# and the channel data is replaced with the darkest red shade available &lt;/span&gt;
 &lt;span class="c1"&gt;# while setting the green and blue values to zero&lt;/span&gt;
 &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# [red, green, blue]&lt;/span&gt;
 &lt;span class="c1"&gt;# show the image array&lt;/span&gt;
 &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output of this code describes:&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;shape&lt;/strong&gt; of the 3D array&lt;br/&gt;
we can inspect the number of rows and columns, as well as the number of color channels. Some image formats can contain additional channel filter data i.e. infrared, etc.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shape: (300, 451, 3)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There exist different conventions for representing image values, the most common are:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Float64&lt;/em&gt;: where  0 is black, 255 is white (0-255)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;uint8&lt;/em&gt;: where  0 is black, 1 is white (0-1)&lt;/p&gt;
&lt;p&gt;Scipy allows any data-type as input, as long as the range is correct (&lt;strong&gt;0-1&lt;/strong&gt; for floating point images, &lt;strong&gt;0-255&lt;/strong&gt; for unsigned bytes, &lt;strong&gt;0-65535&lt;/strong&gt; for unsigned 16-bit integers).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;range&lt;/strong&gt; of values contained in this image were found to be:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Values min/max: (0, 231)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is clear this image was input as an float64 data type,this could be easily converted if required.&lt;/p&gt;
&lt;p&gt;The resulting plot is displayed below:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="cat" src="/img/cat.png" style="width: 490px; height: auto; max-width: 100%;"/&gt; &lt;/p&gt;
&lt;h2&gt;Separation of color channels&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;Using another sample image the separation of color data can be performed quite simply, this may be useful in assessing the different channels of irradiated film using python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'../images/Bells-Beach.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="c1"&gt;# each color channel assigned to a different variable&lt;/span&gt;

 &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 0 channel is red&lt;/span&gt;
 &lt;span class="c1"&gt;# ... operator in array grabs all values until final array dimension&lt;/span&gt;
 &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 1 is green&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 2 is blue&lt;/span&gt;

 &lt;span class="c1"&gt;# plotting the image and r, g, b channels&lt;/span&gt;
 &lt;span class="c1"&gt;# setting figure size &lt;/span&gt;
 &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'off'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax_r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax_g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;

 &lt;span class="c1"&gt;# set image to grey scale to view color dependency&lt;/span&gt;
 &lt;span class="n"&gt;ax_r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'gray'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;ax_r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'red channel'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="n"&gt;ax_g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'gray'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;ax_g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'green channel'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="n"&gt;ax_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'gray'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;ax_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blue channel'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="c1"&gt;# stack the R, G, and B layers using a numpy attribute&lt;/span&gt;
 &lt;span class="n"&gt;ax_color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="n"&gt;ax_color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'all channels'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The resulting plots are displayed below:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="separation" src="/img/separation.png" style="width: 1210px; height: auto; max-width: 100%;"/&gt; &lt;/p&gt;
&lt;p&gt;The lighter the areas in the individual images represent areas with the highest value for the corresponding channel. For example, the sea in the blue channel is quite bright as it holds a large portion of the information for that section. Where as the bushes are quite dark due to the values being contained in mainly the green channel.  &lt;/p&gt;
&lt;h2&gt;Segmentation of images&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;Segmentation deals with separating the image into regions of interest.  &lt;/p&gt;
&lt;p&gt;Segmentation contains two major sub-fields:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Supervised segmentation&lt;/em&gt;: Some prior knowledge, possibly from human input, is used to guide the algorithm.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Unsupervised segmentation&lt;/em&gt;: No prior knowledge. These algorithms attempt to subdivide into meaningful regions automatically. The user may be able to tweak settings like number of regions.&lt;/p&gt;
&lt;p&gt;The simplest method would be thresholding, which will be examined in this section.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

 &lt;span class="c1"&gt;# importing relevant packages &lt;/span&gt;
 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;skimage.data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt;
 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;skimage.segmentation&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;seg&lt;/span&gt;
 &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;
 &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt;
 &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
 &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;skimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;exposure&lt;/span&gt;

 &lt;span class="c1"&gt;# useful function when plotting multiple figures&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;image_show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'gray'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'gray'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'off'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;

 &lt;span class="c1"&gt;# loading sample image&lt;/span&gt;
 &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="n"&gt;image_show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="threshold text" src="/img/thresh_pic.png" style="width: 1094px; height: auto; max-width: 100%;"/&gt; &lt;/p&gt;
&lt;p&gt;The values of the array can be unraveled to generate a histogram of the individual pixel values. If the image was exposed correctly the distribution may be bimodal allowing us to simply cut-off the lower values. However, this is usually not the case.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="histogram" src="/img/hist.png" style="width: 911px; height: auto; max-width: 100%;"/&gt; &lt;/p&gt;
&lt;p&gt;Using supervised segmentation, we could set a cut-off value. This would require trial and error, therefore, a supervised method can be more beneficial. In this case the sauvola filter was applied which attempts to set an ideal threshold for every pixel.  &lt;/p&gt;
&lt;p&gt;After examining multiple cut-off values the best supervised thresholding set at 100 produced the following figure:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="supervised" src="/img/supervised.png" style="width: 1487px; height: auto; max-width: 100%;"/&gt; &lt;/p&gt;
&lt;p&gt;Clearly there is room for improvement. By using the sauvola filter in sckit-image package, the following image was obtained.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="unsupervised" src="/img/unsupervised.png" style="width: 1489px; height: auto; max-width: 100%;"/&gt; &lt;/p&gt;
&lt;p&gt;The choice of an appropriate filter had a substantial impact on the information retained in this image in comparison to the supervised method.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;python can be used as a powerful tool in the anaylsis of images, in particular with the inclusion of the filters and attributes in the scipy and sckit-image modules. &lt;/p&gt;</content><category term="blogging"></category><category term="sckit-image"></category><category term="scipy"></category><category term="image analysis"></category><category term="python"></category></entry><entry><title>Data Analysis with pandas</title><link href="/articles/2020/04/14/data-analysis-with-pandas/" rel="alternate"></link><published>2020-04-14T00:00:00+01:00</published><updated>2020-04-14T00:00:00+01:00</updated><author><name>Kieran McAuley</name></author><id>tag:None,2020-04-14:/articles/2020/04/14/data-analysis-with-pandas/</id><summary type="html">&lt;h1&gt;&lt;code&gt;Introduction to Data Analysis with pandas&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;To become familiarised with the &lt;strong&gt;pandas library&lt;/strong&gt; for use in analysis of data I undertook this small project. As most data seen clinically from previous reports and new dose monitoring software will collate data in a &lt;em&gt;.csv&lt;/em&gt; or &lt;em&gt;.dat&lt;/em&gt; file, I examined methods of â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;&lt;code&gt;Introduction to Data Analysis with pandas&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;To become familiarised with the &lt;strong&gt;pandas library&lt;/strong&gt; for use in analysis of data I undertook this small project. As most data seen clinically from previous reports and new dose monitoring software will collate data in a &lt;em&gt;.csv&lt;/em&gt; or &lt;em&gt;.dat&lt;/em&gt; file, I examined methods of pulling this data to python utilising pandas. &lt;/p&gt;
&lt;h2&gt;Formatting data&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;Data obtained from the Met Office Hadley Centre Central England Temperature Data reserve (1772-present), available at Met Office &lt;a href="https://www.metoffice.gov.uk/hadobs/hadcet/data/download.html"&gt;downloads&lt;/a&gt;, was used in this analysis. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Series&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"C:/Users/Kieran/Pandas tutorial/cetml1659on.dat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;skiprows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#only numerical data remains&lt;/span&gt;
    &lt;span class="n"&gt;delim_whitespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# whitespace separated sep='\s+'&lt;/span&gt;
    &lt;span class="c1"&gt;# unrecorded years use variation of -99 as placeholder&lt;/span&gt;
    &lt;span class="c1"&gt;# must be removed&lt;/span&gt;
    &lt;span class="c1"&gt;# df[df &amp;lt; -50] = None (alternative method)&lt;/span&gt;
    &lt;span class="n"&gt;na_values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'-99.9'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-99.99'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#display end of dataset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By examining the average temperature (&lt;span class="math"&gt;\(^\circ\)&lt;/span&gt;C) of each year, the following plot was obtained:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Year_Temp" src="/img/average_year.png" style="width: 528px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;While this data does show an obvious increase in the average temperature (&lt;span class="math"&gt;\(^\circ\)&lt;/span&gt;C) by year, a clearer result could be obtained by grouping the data.&lt;/p&gt;
&lt;h2&gt;Groupby module&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;String manipulation was performed to generate a new column titled 'decade'. Using the groupby module, the mean temperature of each decade was obtained. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;decade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'decade'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decade&lt;/span&gt;
&lt;span class="n"&gt;by_decade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decade'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plotting the average temperatures by decade produces the following figure: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Average Temperature by Decade" src="/img/average_decade.png" style="width: 528px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;The results obtained by grouping the data by decade have become considerably clearer. The manipulation of the data was also quite minimal.&lt;/p&gt;
&lt;h2&gt;Annotation module&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;As annotation within python can become complex, the year plot was used to test certain aspects of annotating figures. The plots of January and June average temperatures by year were included. The aim was to annotate the year which contained the January with highest average temperature ("Warmest Winter"). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#plotting various average annual and monthly temps&lt;/span&gt;
&lt;span class="n"&gt;year_plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'JAN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"steelblue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;year_plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'JUN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"firebrick"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;year_plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'YEAR'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"--"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;year_plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"Average Temperature ($^\circ$C)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;year_plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Year"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'upper left'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;year_plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'black'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#LaTex required for use of symbols&lt;/span&gt;
&lt;span class="n"&gt;year_plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;"Average Temperature ($^\circ$C) vs. Year"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Return index of first occurrence of maximum over requested axis&lt;/span&gt;
&lt;span class="n"&gt;warm_winter_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'JAN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idxmax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;warm_winter_temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'JAN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Warmest winter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;warm_winter_year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;warm_winter_temp&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;xycoords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;xytext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;textcoords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'offset points'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arrowprops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arrowstyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connectionstyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"arc3,rad=-.2"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This considerable block of code produced the annotated figure displayed below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Annotation Example" src="/img/annotation.png" style="width: 515px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;hr/&gt;
&lt;p&gt;The above data all appear to show a local increase of the average temperatures by year and decade. This would be expected, as we know there is a global increase in the average temperatures observed worldwide.&lt;/p&gt;
&lt;p&gt;The use of python in selection and manipulation in this data analysis was quite simple and removed the need for manual manipulation of data compared to another available software. Although the &lt;em&gt;annotation module&lt;/em&gt; commonly used to annotate figures can be difficult to implement and may produce large blocks of code, the results are markedly better than what can be achieved in programs such as &lt;strong&gt;Excel&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Future work to improve this analysis should examine areas such as error analysis with python and further annotation examples. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="blogging"></category><category term="pandas"></category><category term="data analysis"></category><category term="python"></category><category term="annotation"></category></entry><entry><title>First Post</title><link href="/articles/2020/04/06/first-post/" rel="alternate"></link><published>2020-04-06T00:00:00+01:00</published><updated>2020-04-06T00:00:00+01:00</updated><author><name>Kieran McAuley</name></author><id>tag:None,2020-04-06:/articles/2020/04/06/first-post/</id><summary type="html">&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Jupyter-Notebook-example"&gt;Jupyter Notebook example&lt;a class="anchor-link" href="#Jupyter-Notebook-example"&gt;Â¶&lt;/a&gt;&lt;/h1&gt;&lt;hr/&gt;
&lt;p&gt;This is a previously written python code in a jupyter notebook to test its implementation on the site.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;InÂ [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-python"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Created on Fri Nov 25 19:23:20 2016&lt;/span&gt;

&lt;span class="sd"&gt;@author: Kieran&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.animation&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;animation&lt;/span&gt;

&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100 â€¦&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Jupyter-Notebook-example"&gt;Jupyter Notebook example&lt;a class="anchor-link" href="#Jupyter-Notebook-example"&gt;Â¶&lt;/a&gt;&lt;/h1&gt;&lt;hr/&gt;
&lt;p&gt;This is a previously written python code in a jupyter notebook to test its implementation on the site.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;InÂ [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-python"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Created on Fri Nov 25 19:23:20 2016&lt;/span&gt;

&lt;span class="sd"&gt;@author: Kieran&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.animation&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;animation&lt;/span&gt;

&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;ON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
&lt;span class="n"&gt;OFF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# populate grid with random on/off - more off than on&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;
  &lt;span class="c1"&gt;# copy grid since we require 8 neighbors for calculation&lt;/span&gt;
  &lt;span class="c1"&gt;# and we go line by line &lt;/span&gt;
  &lt;span class="n"&gt;newGrid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="c1"&gt;# compute 8-neghbor sum &lt;/span&gt;
      &lt;span class="c1"&gt;# using toroidal boundary conditions - x and y wrap around &lt;/span&gt;
      &lt;span class="c1"&gt;# so that the simulaton takes place on a toroidal surface.&lt;/span&gt;
      &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
               &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
               &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
               &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;
      &lt;span class="c1"&gt;# apply Conway's rules&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
          &lt;span class="n"&gt;newGrid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OFF&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;newGrid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ON&lt;/span&gt;
  &lt;span class="c1"&gt;# update data&lt;/span&gt;
  &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newGrid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newGrid&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# set up animation&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ani&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FuncAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;save_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;
&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="output_svg output_subarea"&gt;
&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Created with matplotlib (https://matplotlib.org/) --&gt;
&lt;svg height="252.018125pt" version="1.1" viewbox="0 0 251.565 252.018125" width="251.565pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;defs&gt;
&lt;style type="text/css"&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
&lt;/defs&gt;
&lt;g id="figure_1"&gt;
&lt;g id="patch_1"&gt;
&lt;path d="M 0 252.018125 
L 251.565 252.018125 
L 251.565 0 
L 0 0 
z
" style="fill:none;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="axes_1"&gt;
&lt;g id="patch_2"&gt;
&lt;path d="M 26.925 241.318125 
L 244.365 241.318125 
L 244.365 23.878125 
L 26.925 23.878125 
z
" style="fill:#ffffff;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g clip-path="url(#p24eecfb822)"&gt;
&lt;image height="218" id="image690ae0dd21" transform="scale(1 -1)translate(0 -218)" width="218" x="26.925" xlink:href="data:image/png;base64,
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" y="-23.318125"/&gt;
&lt;/g&gt;
&lt;g id="matplotlib.axis_1"&gt;
&lt;g id="xtick_1"&gt;
&lt;g id="line2d_1"&gt;
&lt;defs&gt;
&lt;path d="M 0 0 
L 0 3.5 
" id="m202d8a600a" style="stroke:#000000;stroke-width:0.8;"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="28.0122" xlink:href="#m202d8a600a" y="241.318125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="line2d_2"&gt;
&lt;defs&gt;
&lt;path d="M 0 0 
L 0 -3.5 
" id="m9ef04ba341" style="stroke:#000000;stroke-width:0.8;"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="28.0122" xlink:href="#m9ef04ba341" y="23.878125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_1"&gt;
&lt;!-- 0 --&gt;
&lt;defs&gt;
&lt;path d="M 31.78125 66.40625 
Q 24.171875 66.40625 20.328125 58.90625 
Q 16.5 51.421875 16.5 36.375 
Q 16.5 21.390625 20.328125 13.890625 
Q 24.171875 6.390625 31.78125 6.390625 
Q 39.453125 6.390625 43.28125 13.890625 
Q 47.125 21.390625 47.125 36.375 
Q 47.125 51.421875 43.28125 58.90625 
Q 39.453125 66.40625 31.78125 66.40625 
z
M 31.78125 74.21875 
Q 44.046875 74.21875 50.515625 64.515625 
Q 56.984375 54.828125 56.984375 36.375 
Q 56.984375 17.96875 50.515625 8.265625 
Q 44.046875 -1.421875 31.78125 -1.421875 
Q 19.53125 -1.421875 13.0625 8.265625 
Q 6.59375 17.96875 6.59375 36.375 
Q 6.59375 54.828125 13.0625 64.515625 
Q 19.53125 74.21875 31.78125 74.21875 
z
" id="DejaVuSans-48"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g transform="translate(24.83095 14.798438)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_2"&gt;
&lt;g id="line2d_3"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="71.5002" xlink:href="#m202d8a600a" y="241.318125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="line2d_4"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="71.5002" xlink:href="#m9ef04ba341" y="23.878125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_2"&gt;
&lt;!-- 20 --&gt;
&lt;defs&gt;
&lt;path d="M 19.1875 8.296875 
L 53.609375 8.296875 
L 53.609375 0 
L 7.328125 0 
L 7.328125 8.296875 
Q 12.9375 14.109375 22.625 23.890625 
Q 32.328125 33.6875 34.8125 36.53125 
Q 39.546875 41.84375 41.421875 45.53125 
Q 43.3125 49.21875 43.3125 52.78125 
Q 43.3125 58.59375 39.234375 62.25 
Q 35.15625 65.921875 28.609375 65.921875 
Q 23.96875 65.921875 18.8125 64.3125 
Q 13.671875 62.703125 7.8125 59.421875 
L 7.8125 69.390625 
Q 13.765625 71.78125 18.9375 73 
Q 24.125 74.21875 28.421875 74.21875 
Q 39.75 74.21875 46.484375 68.546875 
Q 53.21875 62.890625 53.21875 53.421875 
Q 53.21875 48.921875 51.53125 44.890625 
Q 49.859375 40.875 45.40625 35.40625 
Q 44.1875 33.984375 37.640625 27.21875 
Q 31.109375 20.453125 19.1875 8.296875 
z
" id="DejaVuSans-50"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g transform="translate(65.1377 14.798438)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-50"&gt;&lt;/use&gt;
&lt;use x="63.623047" xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_3"&gt;
&lt;g id="line2d_5"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="114.9882" xlink:href="#m202d8a600a" y="241.318125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="line2d_6"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="114.9882" xlink:href="#m9ef04ba341" y="23.878125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_3"&gt;
&lt;!-- 40 --&gt;
&lt;defs&gt;
&lt;path d="M 37.796875 64.3125 
L 12.890625 25.390625 
L 37.796875 25.390625 
z
M 35.203125 72.90625 
L 47.609375 72.90625 
L 47.609375 25.390625 
L 58.015625 25.390625 
L 58.015625 17.1875 
L 47.609375 17.1875 
L 47.609375 0 
L 37.796875 0 
L 37.796875 17.1875 
L 4.890625 17.1875 
L 4.890625 26.703125 
z
" id="DejaVuSans-52"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g transform="translate(108.6257 14.798438)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-52"&gt;&lt;/use&gt;
&lt;use x="63.623047" xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_4"&gt;
&lt;g id="line2d_7"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="158.4762" xlink:href="#m202d8a600a" y="241.318125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="line2d_8"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="158.4762" xlink:href="#m9ef04ba341" y="23.878125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_4"&gt;
&lt;!-- 60 --&gt;
&lt;defs&gt;
&lt;path d="M 33.015625 40.375 
Q 26.375 40.375 22.484375 35.828125 
Q 18.609375 31.296875 18.609375 23.390625 
Q 18.609375 15.53125 22.484375 10.953125 
Q 26.375 6.390625 33.015625 6.390625 
Q 39.65625 6.390625 43.53125 10.953125 
Q 47.40625 15.53125 47.40625 23.390625 
Q 47.40625 31.296875 43.53125 35.828125 
Q 39.65625 40.375 33.015625 40.375 
z
M 52.59375 71.296875 
L 52.59375 62.3125 
Q 48.875 64.0625 45.09375 64.984375 
Q 41.3125 65.921875 37.59375 65.921875 
Q 27.828125 65.921875 22.671875 59.328125 
Q 17.53125 52.734375 16.796875 39.40625 
Q 19.671875 43.65625 24.015625 45.921875 
Q 28.375 48.1875 33.59375 48.1875 
Q 44.578125 48.1875 50.953125 41.515625 
Q 57.328125 34.859375 57.328125 23.390625 
Q 57.328125 12.15625 50.6875 5.359375 
Q 44.046875 -1.421875 33.015625 -1.421875 
Q 20.359375 -1.421875 13.671875 8.265625 
Q 6.984375 17.96875 6.984375 36.375 
Q 6.984375 53.65625 15.1875 63.9375 
Q 23.390625 74.21875 37.203125 74.21875 
Q 40.921875 74.21875 44.703125 73.484375 
Q 48.484375 72.75 52.59375 71.296875 
z
" id="DejaVuSans-54"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g transform="translate(152.1137 14.798438)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-54"&gt;&lt;/use&gt;
&lt;use x="63.623047" xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="xtick_5"&gt;
&lt;g id="line2d_9"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="201.9642" xlink:href="#m202d8a600a" y="241.318125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="line2d_10"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="201.9642" xlink:href="#m9ef04ba341" y="23.878125"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_5"&gt;
&lt;!-- 80 --&gt;
&lt;defs&gt;
&lt;path d="M 31.78125 34.625 
Q 24.75 34.625 20.71875 30.859375 
Q 16.703125 27.09375 16.703125 20.515625 
Q 16.703125 13.921875 20.71875 10.15625 
Q 24.75 6.390625 31.78125 6.390625 
Q 38.8125 6.390625 42.859375 10.171875 
Q 46.921875 13.96875 46.921875 20.515625 
Q 46.921875 27.09375 42.890625 30.859375 
Q 38.875 34.625 31.78125 34.625 
z
M 21.921875 38.8125 
Q 15.578125 40.375 12.03125 44.71875 
Q 8.5 49.078125 8.5 55.328125 
Q 8.5 64.0625 14.71875 69.140625 
Q 20.953125 74.21875 31.78125 74.21875 
Q 42.671875 74.21875 48.875 69.140625 
Q 55.078125 64.0625 55.078125 55.328125 
Q 55.078125 49.078125 51.53125 44.71875 
Q 48 40.375 41.703125 38.8125 
Q 48.828125 37.15625 52.796875 32.3125 
Q 56.78125 27.484375 56.78125 20.515625 
Q 56.78125 9.90625 50.3125 4.234375 
Q 43.84375 -1.421875 31.78125 -1.421875 
Q 19.734375 -1.421875 13.25 4.234375 
Q 6.78125 9.90625 6.78125 20.515625 
Q 6.78125 27.484375 10.78125 32.3125 
Q 14.796875 37.15625 21.921875 38.8125 
z
M 18.3125 54.390625 
Q 18.3125 48.734375 21.84375 45.5625 
Q 25.390625 42.390625 31.78125 42.390625 
Q 38.140625 42.390625 41.71875 45.5625 
Q 45.3125 48.734375 45.3125 54.390625 
Q 45.3125 60.0625 41.71875 63.234375 
Q 38.140625 66.40625 31.78125 66.40625 
Q 25.390625 66.40625 21.84375 63.234375 
Q 18.3125 60.0625 18.3125 54.390625 
z
" id="DejaVuSans-56"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g transform="translate(195.6017 14.798438)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-56"&gt;&lt;/use&gt;
&lt;use x="63.623047" xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="matplotlib.axis_2"&gt;
&lt;g id="ytick_1"&gt;
&lt;g id="line2d_11"&gt;
&lt;defs&gt;
&lt;path d="M 0 0 
L -3.5 0 
" id="mc2b8f5796f" style="stroke:#000000;stroke-width:0.8;"&gt;&lt;/path&gt;
&lt;/defs&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="26.925" xlink:href="#mc2b8f5796f" y="24.965325"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_6"&gt;
&lt;!-- 0 --&gt;
&lt;g transform="translate(13.5625 28.764544)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_2"&gt;
&lt;g id="line2d_12"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="26.925" xlink:href="#mc2b8f5796f" y="68.453325"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_7"&gt;
&lt;!-- 20 --&gt;
&lt;g transform="translate(7.2 72.252544)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-50"&gt;&lt;/use&gt;
&lt;use x="63.623047" xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_3"&gt;
&lt;g id="line2d_13"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="26.925" xlink:href="#mc2b8f5796f" y="111.941325"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_8"&gt;
&lt;!-- 40 --&gt;
&lt;g transform="translate(7.2 115.740544)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-52"&gt;&lt;/use&gt;
&lt;use x="63.623047" xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_4"&gt;
&lt;g id="line2d_14"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="26.925" xlink:href="#mc2b8f5796f" y="155.429325"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_9"&gt;
&lt;!-- 60 --&gt;
&lt;g transform="translate(7.2 159.228544)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-54"&gt;&lt;/use&gt;
&lt;use x="63.623047" xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="ytick_5"&gt;
&lt;g id="line2d_15"&gt;
&lt;g&gt;
&lt;use style="stroke:#000000;stroke-width:0.8;" x="26.925" xlink:href="#mc2b8f5796f" y="198.917325"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="text_10"&gt;
&lt;!-- 80 --&gt;
&lt;g transform="translate(7.2 202.716544)scale(0.1 -0.1)"&gt;
&lt;use xlink:href="#DejaVuSans-56"&gt;&lt;/use&gt;
&lt;use x="63.623047" xlink:href="#DejaVuSans-48"&gt;&lt;/use&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g id="patch_3"&gt;
&lt;path d="M 26.925 241.318125 
L 26.925 23.878125 
" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_4"&gt;
&lt;path d="M 244.365 241.318125 
L 244.365 23.878125 
" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_5"&gt;
&lt;path d="M 26.925 241.318125 
L 244.365 241.318125 
" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;g id="patch_6"&gt;
&lt;path d="M 26.925 23.878125 
L 244.365 23.878125 
" style="fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;"&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;defs&gt;
&lt;clippath id="p24eecfb822"&gt;
&lt;rect height="217.44" width="217.44" x="26.925" y="23.878125"&gt;&lt;/rect&gt;
&lt;/clippath&gt;
&lt;/defs&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="portfolio post"></category><category term="jupyter notebook"></category><category term="python"></category><category term="cellular automata"></category></entry></feed>